<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>每日一题 二进制求和</title>
      <link href="/2020/06/23/leetcode-67/"/>
      <url>/2020/06/23/leetcode-67/</url>
      
        <content type="html"><![CDATA[<p>给你两个二进制字符串，返回它们的和（用二进制表示）。</p><p>输入为 非空 字符串且只包含数字 1 和 0。</p> <a id="more"></a><p>示例 1:</p><p>输入: a = “11”, b = “1”<br>输出: “100”<br>示例 2:</p><p>输入: a = “1010”, b = “1011”<br>输出: “10101”</p><p>代码如下：</p><p>class Solution {</p><p>public:</p><p>  string addBinary(string a, string b) {</p><p>​    string ans;</p><p>​    reverse(a.begin(), a.end());</p><p>​    reverse(b.begin(), b.end());</p><p>​    int n = max(a.size(), b.size()), carry = 0;</p><p>​    for (size_t i = 0; i &lt; n; ++i) {</p><p>​      carry += i &lt; a.size() ? (a.at(i) == ‘1’) : 0;</p><p>​      carry += i &lt; b.size() ? (b.at(i) == ‘1’) : 0;</p><p>​      ans.push_back((carry % 2) ? ‘1’ : ‘0’);</p><p>​      carry /= 2;</p><p>​    }</p><p>​    if (carry) {</p><p>​      ans.push_back(‘1’);</p><p>​    }</p><p>​    reverse(ans.begin(), ans.end());</p><p>​    return ans;</p><p>  }</p><p>};</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题 验证回文串</title>
      <link href="/2020/06/19/leetcode-125/"/>
      <url>/2020/06/19/leetcode-125/</url>
      
        <content type="html"><![CDATA[<p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p><p>说明：本题中，我们将空字符串定义为有效的回文串。</p><a id="more"></a><p>示例 1:</p><p>输入: “A man, a plan, a canal: Panama”<br>输出: true<br>示例 2:</p><p>输入: “race a car”<br>输出: false</p><p>代码如下：</p><p>class Solution {</p><p>public:</p><p>  bool isPalindrome(string s) {</p><p>​    string sgood;</p><p>​    for (char ch: s) {</p><p>​      if (isalnum(ch)) {</p><p>​        sgood += tolower(ch);</p><p>​      }</p><p>​    }</p><p>​    string sgood_rev(sgood.rbegin(), sgood.rend());</p><p>​    return sgood == sgood_rev;</p><p>  }</p><p>};</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题 最佳观光组合</title>
      <link href="/2020/06/17/leetcode-1014/"/>
      <url>/2020/06/17/leetcode-1014/</url>
      
        <content type="html"><![CDATA[<p>给定正整数数组 A，A[i] 表示第 i 个观光景点的评分，并且两个景点 i 和 j 之间的距离为 j - i。</p><p>一对景点（i &lt; j）组成的观光组合的得分为（A[i] + A[j] + i - j）：景点的评分之和减去它们两者之间的距离。</p><p>返回一对观光景点能取得的最高分。</p> <a id="more"></a><p>示例：</p><p>输入：[8,1,5,2,6]<br>输出：11<br>解释：i = 0, j = 2, A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11</p><p>提示：</p><p>2 &lt;= A.length &lt;= 50000<br>1 &lt;= A[i] &lt;= 1000</p><p>代码如下：</p><p>class Solution {</p><p>public:</p><p>  int maxScoreSightseeingPair(vector<int>&amp; A) {</p><p>​    int ans = 0, mx = A[0] + 0;</p><p>​    for (int j = 1; j &lt; A.size(); ++j) {</p><p>​      ans = max(ans, mx + A[j] - j);</p><p>​      // 边遍历边维护</p><p>​      mx = max(mx, A[j] + j);</p><p>​    }</p><p>​    return ans;</p><p>  }</p><p>};</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题 二叉树的序列化与反序列化</title>
      <link href="/2020/06/16/leetcode-297/"/>
      <url>/2020/06/16/leetcode-297/</url>
      
        <content type="html"><![CDATA[<p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p><p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p><a id="more"></a><p>示例: </p><p>你可以将以下二叉树：</p><p>​    1</p><p>   / <br>  2   3<br>     / <br>    4   5</p><p>序列化为 “[1,2,3,null,null,4,5]”</p><p>提示: 这与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。</p><p>说明: 不要使用类的成员 / 全局 / 静态变量来存储状态，你的序列化和反序列化算法应该是无状态的。</p><p>代码如下：</p><p>/**</p><p> * Definition for a binary tree node.</p><p> * struct TreeNode {</p><p> *   int val;</p><p> *   TreeNode *left;</p><p> *   TreeNode *right;</p><p> *   TreeNode(int x) : val(x), left(NULL), right(NULL) {}</p><p> * };</p><p> */</p><p>class Codec {</p><p>public:</p><p>  string serialize(TreeNode* root) {</p><p>​    if (!root) return “X”;</p><p>​    auto l = “(“ + serialize(root-&gt;left) + “)”;</p><p>​    auto r = “(“ + serialize(root-&gt;right) + “)”;</p><p>​    return l + to_string(root-&gt;val) + r;</p><p>  }</p><p>  inline TreeNode* parseSubtree(const string &amp;data, int &amp;ptr) {</p><p>​    ++ptr; // 跳过左括号</p><p>​    auto subtree = parse(data, ptr);</p><p>​    ++ptr; // 跳过右括号</p><p>​    return subtree;</p><p>  }</p><p>  inline int parseInt(const string &amp;data, int &amp;ptr) {</p><p>​    int x = 0, sgn = 1;</p><p>​    if (!isdigit(data[ptr])) {</p><p>​      sgn = -1;</p><p>​      ++ptr;</p><p>​    }</p><p>​    while (isdigit(data[ptr])) {</p><p>​      x = x * 10 + data[ptr++] - ‘0’;</p><p>​    }</p><p>​    return x * sgn;</p><p>  }</p><p>  TreeNode* parse(const string &amp;data, int &amp;ptr) {</p><p>​    if (data[ptr] == ‘X’) {</p><p>​      ++ptr;</p><p>​      return nullptr;</p><p>​    }</p><p>​    auto cur = new TreeNode(0);</p><p>​    cur-&gt;left = parseSubtree(data, ptr);</p><p>​    cur-&gt;val = parseInt(data, ptr);</p><p>​    cur-&gt;right = parseSubtree(data, ptr);</p><p>​    return cur;</p><p>  }</p><p>  TreeNode* deserialize(string data) {</p><p>​    int ptr = 0;</p><p>​    return parse(data, ptr);</p><p>  }</p><p>};</p><p>// Your Codec object will be instantiated and called as such:</p><p>// Codec codec;</p><p>// codec.deserialize(codec.serialize(root));</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题 最长公共前缀</title>
      <link href="/2020/06/15/leetcode-14/"/>
      <url>/2020/06/15/leetcode-14/</url>
      
        <content type="html"><![CDATA[<p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 “”。</p><a id="more"></a><p>示例 1:</p><p>输入: [“flower”,”flow”,”flight”]<br>输出: “fl”<br>示例 2:</p><p>输入: [“dog”,”racecar”,”car”]<br>输出: “”<br>解释: 输入不存在公共前缀。</p><p>代码如下：</p><p>class Solution {</p><p>public:</p><p>  string longestCommonPrefix(vector<string>&amp; strs) {</p><p>​    if (!strs.size()) {</p><p>​      return “”;</p><p>​    }</p><p>​    string prefix = strs[0];</p><p>​    int count = strs.size();</p><p>​    for (int i = 1; i &lt; count; ++i) {</p><p>​      prefix = longestCommonPrefix(prefix, strs[i]);</p><p>​      if (!prefix.size()) {</p><p>​        break;</p><p>​      }</p><p>​    }</p><p>​    return prefix;</p><p>  }</p><p>  string longestCommonPrefix(const string&amp; str1, const string&amp; str2) {</p><p>​    int length = min(str1.size(), str2.size());</p><p>​    int index = 0;</p><p>​    while (index &lt; length &amp;&amp; str1[index] == str2[index]) {</p><p>​      ++index;</p><p>​    }</p><p>​    return str1.substr(0, index);</p><p>  }</p><p>};</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题 转变数组后最接近目标值的数组和</title>
      <link href="/2020/06/14/leetcode-1300/"/>
      <url>/2020/06/14/leetcode-1300/</url>
      
        <content type="html"><![CDATA[<p>给你一个整数数组 arr 和一个目标值 target ，请你返回一个整数 value ，使得将数组中所有大于 value 的值变成 value 后，数组的和最接近  target （最接近表示两者之差的绝对值最小）。</p><p>如果有多种使得和最接近 target 的方案，请你返回这些整数中的最小值。</p><p>请注意，答案不一定是 arr 中的数字。</p> <a id="more"></a><p>示例 1：</p><p>输入：arr = [4,9,3], target = 10<br>输出：3<br>解释：当选择 value 为 3 时，数组会变成 [3, 3, 3]，和为 9 ，这是最接近 target 的方案。<br>示例 2：</p><p>输入：arr = [2,3,5], target = 10<br>输出：5<br>示例 3：</p><p>输入：arr = [60864,25176,27249,21296,20204], target = 56803<br>输出：11361</p><p>提示：</p><p>1 &lt;= arr.length &lt;= 10^4<br>1 &lt;= arr[i], target &lt;= 10^5</p><p>代码如下：</p><p>class Solution {</p><p>public:</p><p>  int findBestValue(vector<int>&amp; arr, int target) {</p><p>​    sort(arr.begin(), arr.end());</p><p>​    int n = arr.size();</p><p>​    vector<int> prefix(n + 1);</p><p>​    for (int i = 1; i &lt;= n; ++i) {</p><p>​      prefix[i] = prefix[i - 1] + arr[i - 1];</p><p>​    }</p><p>​    int r = *max_element(arr.begin(), arr.end());</p><p>​    int ans = 0, diff = target;</p><p>​    for (int i = 1; i &lt;= r; ++i) {</p><p>​      auto iter = lower_bound(arr.begin(), arr.end(), i);</p><p>​      int cur = prefix[iter - arr.begin()] + (arr.end() - iter) * i;</p><p>​      if (abs(cur - target) &lt; diff) {</p><p>​        ans = i;</p><p>​        diff = abs(cur - target);</p><p>​      }</p><p>​    }</p><p>​    return ans;</p><p>  }</p><p>};</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题 爬楼梯</title>
      <link href="/2020/06/13/leetcode-70/"/>
      <url>/2020/06/13/leetcode-70/</url>
      
        <content type="html"><![CDATA[<p>假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>注意：</strong>给定 <em>n</em> 是一个正整数。</p><a id="more"></a><p>示例 1：</p><p>输入： 2<br>输出： 2<br>解释： 有两种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶</li><li>2 阶<br>示例 2：</li></ol><p>输入： 3<br>输出： 3<br>解释： 有三种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶 + 1 阶</li><li>1 阶 + 2 阶</li><li>2 阶 + 1 阶</li></ol><p>代码如下：</p><p>class Solution {</p><p>public:</p><p>  int climbStairs(int n) {</p><p>​    int p = 0, q = 0, r = 1;</p><p>​    for (int i = 1; i &lt;= n; ++i) {</p><p>​      p = q; </p><p>​      q = r; </p><p>​      r = p + q;</p><p>​    }</p><p>​    return r;</p><p>  }</p><p>};</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题 三数之和</title>
      <link href="/2020/06/12/leetcode-15/"/>
      <url>/2020/06/12/leetcode-15/</url>
      
        <content type="html"><![CDATA[<p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><a id="more"></a><p>示例：</p><p>给定数组 nums = [-1, 0, 1, 2, -1, -4]，</p><p>满足要求的三元组集合为：<br>[<br>  [-1, 0, 1],<br>  [-1, -1, 2]<br>]</p><p>代码如下：</p><p>class Solution {</p><p>public:</p><p>  vector&lt;vector<int>&gt; threeSum(vector<int>&amp; nums) {</p><p>​    int n = nums.size();</p><p>​    sort(nums.begin(), nums.end());</p><p>​    vector&lt;vector<int>&gt; ans;</p><p>​    // 枚举 a</p><p>​    for (int first = 0; first &lt; n; ++first) {</p><p>​      // 需要和上一次枚举的数不相同</p><p>​      if (first &gt; 0 &amp;&amp; nums[first] == nums[first - 1]) {</p><p>​        continue;</p><p>​      }</p><p>​      // c 对应的指针初始指向数组的最右端</p><p>​      int third = n - 1;</p><p>​      int target = -nums[first];</p><p>​      // 枚举 b</p><p>​      for (int second = first + 1; second &lt; n; ++second) {</p><p>​        // 需要和上一次枚举的数不相同</p><p>​        if (second &gt; first + 1 &amp;&amp; nums[second] == nums[second - 1]) {</p><p>​          continue;</p><p>​        }</p><p>​        // 需要保证 b 的指针在 c 的指针的左侧</p><p>​        while (second &lt; third &amp;&amp; nums[second] + nums[third] &gt; target) {</p><p>​          –third;</p><p>​        }</p><p>​        // 如果指针重合，随着 b 后续的增加</p><p>​        // 就不会有满足 a+b+c=0 并且 b&lt;c 的 c 了，可以退出循环</p><p>​        if (second == third) {</p><p>​          break;</p><p>​        }</p><p>​        if (nums[second] + nums[third] == target) {</p><p>​          ans.push_back({nums[first], nums[second], nums[third]});</p><p>​        }</p><p>​      }</p><p>​    }</p><p>​    return ans;</p><p>  }</p><p>};</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题 每日温度</title>
      <link href="/2020/06/11/leetcode-739/"/>
      <url>/2020/06/11/leetcode-739/</url>
      
        <content type="html"><![CDATA[<p>请根据每日 气温 列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。</p><a id="more"></a><p>例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。</p><p>提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。</p><p>代码如下：</p><p>class Solution {</p><p>public:</p><p>  vector<int> dailyTemperatures(vector<int>&amp; T) {</p><p>​    int n = T.size();</p><p>​    vector<int> ans(n), next(101, INT_MAX);</p><p>​    for (int i = n - 1; i &gt;= 0; –i) {</p><p>​      int warmerIndex = INT_MAX;</p><p>​      for (int t = T[i] + 1; t &lt;= 100; ++t) {</p><p>​        warmerIndex = min(warmerIndex, next[t]);</p><p>​      }</p><p>​      if (warmerIndex != INT_MAX) {</p><p>​        ans[i] = warmerIndex - i;</p><p>​      }</p><p>​      next[T[i]] = i;</p><p>​    }</p><p>​    return ans;</p><p>  }</p><p>};</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题 回文数</title>
      <link href="/2020/06/10/leetcode-9/"/>
      <url>/2020/06/10/leetcode-9/</url>
      
        <content type="html"><![CDATA[<p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><a id="more"></a><p>示例 1:</p><p>输入: 121<br>输出: true<br>示例 2:</p><p>输入: -121<br>输出: false<br>解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。<br>示例 3:</p><p>输入: 10<br>输出: false<br>解释: 从右向左读, 为 01 。因此它不是一个回文数。</p><p>代码如下：</p><p>class Solution {</p><p>public:</p><p>  bool isPalindrome(int x) {</p><p>​    // 特殊情况：</p><p>​    // 如上所述，当 x &lt; 0 时，x 不是回文数。</p><p>​    // 同样地，如果数字的最后一位是 0，为了使该数字为回文，</p><p>​    // 则其第一位数字也应该是 0</p><p>​    // 只有 0 满足这一属性</p><p>​    if (x &lt; 0 || (x % 10 == 0 &amp;&amp; x != 0)) {</p><p>​      return false;</p><p>​    }</p><p>​    int revertedNumber = 0;</p><p>​    while (x &gt; revertedNumber) {</p><p>​      revertedNumber = revertedNumber * 10 + x % 10;</p><p>​      x /= 10;</p><p>​    }</p><p>​    // 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。</p><p>​    // 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，</p><p>​    // 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。</p><p>​    return x == revertedNumber || x == revertedNumber / 10;</p><p>  }</p><p>};</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题 单词接龙II</title>
      <link href="/2020/06/07/leetcode-126/"/>
      <url>/2020/06/07/leetcode-126/</url>
      
        <content type="html"><![CDATA[<p>题目描述：给定两个单词（beginWord 和 endWord）和一个字典 wordList，找出所有从 beginWord 到 endWord 的最短转换序列。转换需遵循如下规则：</p><p>每次转换只能改变一个字母。<br>转换过程中的中间单词必须是字典中的单词。</p><a id="more"></a><p>说明:</p><p>如果不存在这样的转换序列，返回一个空列表。<br>所有单词具有相同的长度。<br>所有单词只由小写字母组成。<br>字典中不存在重复的单词。<br>你可以假设 beginWord 和 endWord 是非空的，且二者不相同。<br>示例 1:</p><p>输入:<br>beginWord = “hit”,<br>endWord = “cog”,<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”,”cog”]</p><p>输出:<br>[<br>  [“hit”,”hot”,”dot”,”dog”,”cog”],<br>  [“hit”,”hot”,”lot”,”log”,”cog”]<br>]<br>示例 2:</p><p>输入:<br>beginWord = “hit”<br>endWord = “cog”<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”]</p><p>输出: []</p><p>解释: endWord “cog” 不在字典中，所以不存在符合要求的转换序列。</p><p>后续待更新</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题 最长连续序列</title>
      <link href="/2020/06/06/leetcode-128/"/>
      <url>/2020/06/06/leetcode-128/</url>
      
        <content type="html"><![CDATA[<p>题目描述：给定一个未排序的整数数组，找出最长连续序列的长度。要求算法的时间复杂度为O(n)。</p><a id="more"></a><p>示例：</p><p>输入：[100, 4, 200, 1, 3, 2]</p><p>输出：4</p><p>解释：最长连续序列是[1, 2, 3, 4]。它的长度为4。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">         <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; num_set;</span><br><span class="line">         <span class="comment">//遍历整个数组，去重</span></span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">int</span>&amp; num:nums) &#123;</span><br><span class="line">             num_set.insert(num);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">int</span> longestStreak = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">int</span>&amp; num : num_set) &#123;</span><br><span class="line">             <span class="keyword">if</span>(!num_set.count(num<span class="number">-1</span>)) &#123;</span><br><span class="line">                 <span class="keyword">int</span> currentNum = num;</span><br><span class="line">                 <span class="keyword">int</span> currentStreak = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                 <span class="keyword">while</span>(num_set.count(currentNum+<span class="number">1</span>)) &#123;</span><br><span class="line">                     currentNum += <span class="number">1</span>;</span><br><span class="line">                     currentStreak += <span class="number">1</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                 longestStreak = <span class="built_in">max</span>(longestStreak,currentStreak);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> longestStreak;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/05/hello-world/"/>
      <url>/2020/05/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
